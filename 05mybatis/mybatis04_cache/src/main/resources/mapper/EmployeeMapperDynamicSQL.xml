<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stanlong.mybatis.dao.EmployeeMapperDynamicSQL">

	<!-- 
		抽取可重用的sql片段，方便后面引用 
		1、sql抽取，将经常要查询的列名，或者插入用的列名取出来，方便引用
		2、include用来引用已经抽取的sql
		3、include还可以自定义一些property, sql标签内部就能使用自定义属性
			取值的正确方式${prop}, 
			不能是#{}
	 -->
	<sql id="insertColumn">
		last_name, email, gender, d_id
	</sql>
	<!-- 查询员工，要求：可根据任意字段查询 -->
	<select id="getEmpsByConditionIf" resultType="com.stanlong.mybatis.pojo.Employee">
		SELECT * FROM tbl_employee
		<where>
			<!-- test:判断表达示（ognl） 
				遇见特殊符号应该写转义字符
			-->
			<if test="id!=null">
				AND id=#{id}
			</if>
			<if test="lastName!=null and lastName!=''">
				AND last_name like #{lastName}
			</if>
			<if test="email!=null &amp;&amp; email.trim()!=&quot;&quot;">
				AND email=#{email}
			</if>
			<!-- ognl会进行字符串与数字的转换判断， "0"==0 -->
			<if test="gender=='f' or gender=='m'">
				AND gender=#{gender}
			</if>
		</where>
	</select>
	
	<select id="getEmpsByConditionTrim" resultType="com.stanlong.mybatis.pojo.Employee">
		select * from tbl_employee
		<!-- 
			trim:自定义自符串截取规则
			prefix:给拼接后的整个字符串加一个前缀
			 prefixOverrides:前缀覆盖，去掉整个字符串多余的and或or
			 suffix=:给拼接后的整个字符串加一个后缀
			 suffixOverrides:后缀覆盖，去掉整个字符串多余的and或or
		 -->
		<trim prefix="where" prefixOverrides="and">
			<!-- test:判断表达示（ognl） 
				遇见特殊符号应该写转义字符
			-->
			<if test="id!=null">
				AND id=#{id}
			</if>
			<if test="lastName!=null and lastName!=''">
				AND last_name like #{lastName}
			</if>
			<if test="email!=null &amp;&amp; email.trim()!=&quot;&quot;">
				AND email=#{email}
			</if>
			<!-- ognl会进行字符串与数字的转换判断， "0"==0 -->
			<if test="gender=='f' or gender=='m'">
				AND gender=#{gender}
			</if>
		</trim>
	</select>
	
	<!-- 如果id不为空则查id, 如果lastName不为空，则查lastName -->
	<select id="getEmpsByConditionChoose" resultType="com.stanlong.mybatis.pojo.Employee">
		select * from tbl_employee
		<where>
			<choose>
				<when test="id!=null">
					id=#{id}
				</when>
				<when test="lastName!=null">
					last_name like #{lastName}
				</when>
				<when test="email!=null">
					email=#{email}
				</when>
				<otherwise>
					gender='f'
				</otherwise>
			</choose>
		</where>
	</select>
	
	<update id="updateEmp">
		<!-- update tbl_employee
		<set>
			<if test="lastName!=null and lastName!=''">
				last_name = #{lastName},
			</if>
			<if test="email!=null &amp;&amp; email.trim()!=&quot;&quot;">
				email=#{email},
			</if>
			ognl会进行字符串与数字的转换判断， "0"==0
			<if test="gender=='f' or gender=='m'">
				gender=#{gender}
			</if>
		</set>
		where id=#{id} -->
		update tbl_employee
		<trim prefix="set" suffixOverrides=",">
			<if test="lastName!=null and lastName!=''">
				last_name = #{lastName},
			</if>
			<if test="email!=null &amp;&amp; email.trim()!=&quot;&quot;">
				email=#{email},
			</if>
			<if test="gender=='f' or gender=='m'">
				gender=#{gender}
			</if>
		</trim>
		where id=#{id}
	</update>
	
	<select id="getEmpsByConditionForeach" resultType="com.stanlong.mybatis.pojo.Employee">
		select * from tbl_employee
		<!-- 
			collection:指定要遍历的集合：
				list类型的参数会特殊处理封装在map中，map的key就叫list
			item:将当前遍历出的元素赋值给指定的变量
			separator:每个元素之前的分隔符
			open:遍历所有结果拼接一个开始字符
			close:遍历所有结果拼接一个结束字符
			index:索引，遍历list的时候是索引,遍历map的时候index表示map的key,item就是map的值
			#{变量名}就能取出变量值
		 -->
		<foreach collection="ids" item="item_id" separator="," open="where id in (" close=")" index="">
			#{item_id}
		</foreach>
	</select>
	
	<!-- 批量保存 -->
	<!-- 方式1 -->
	<insert id="addEmps">
		insert into tbl_employee(<include refid="insertColumn"></include>)
		values
		<foreach collection="emps" item="emp" separator=",">
			(#{emp.lastName}, #{emp.email}, #{emp.gender}, #{emp.dept.id})
		</foreach>
	</insert>
	
	<!-- 方式2:这种方式需要设置数据库连接属性 allowMultiQueries=true, 
			这种方式也可以用于批量修改删除 ()编译时报错了，需要注意下-->
	<!-- <insert id="addEmps">
		<foreach collection="emps" item="emp" separator=";">
			insert into tbl_employee(last_name, email, gender, d_id)
			values (#{emp.lastName}, #{emp.email}, #{emp.gender}, #{emp.dept.id})
		</foreach>
	</insert> -->
	
	<!-- 
		Oracle不支持values(),(),();
		oracle支持的批量方式
		1、多个insert放在begin - end里面
			begin
			<foreach></foreach>
			end;
		2、利用中间表
			insert into employees(employee_id, last_name, email)
			select employees_seq.nextval,lastName,email from(
				<foreach collections="emps" item="emp" separator="union">
					select #{emp.lastName} lastName, #{emp.email} email from dual
				</foreach>
			)
	 -->
	 
	<!-- 两个内置参数
		_parameter:代表整个参数
			单个参数：_parameter就是这个参数
			多个参数：参数会补封装成一个map, _parameter就是这个map
		_databaseId:如果配置了databaseIdProvider标签
			_databaseId就是代表当前数据库的别名
	 -->
	 
	<select id="getEmpsTestInnerParameter" resultType="com.stanlong.mybatis.pojo.Employee">
		<!-- bind 可以将ognl的值绑定到一个变量中，方便返来引用这个变量的值 -->
		<bind name="_lastName" value="'%'+lastName+'%'"/>
		<if test="_databaseId=='mysql'">
			select * from tbl_employee
			<if test="_parameter != null">
				where last_name like #{_lastName}
			</if>
		</if>
	</select>
</mapper>	