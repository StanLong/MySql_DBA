<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stanlong.mybatis.dao.EmployeeMapperPlus">
	
	<!-- 自定义某个javaBean的封装规则
		id:定义主键，mybatis底层会有优化
		type: 自定义规则 的java类型
		id: 唯一id方便引用
	 -->
	<resultMap type="com.stanlong.mybatis.pojo.Employee" id="MySimpleEmp">
		<!-- 指定主键列的封装规则
			id
			column:指定哪一列
			property:指定对应的javaBean属性
		 -->
		<id column="" property=""/>
		<!-- 普通列 封装-->
		<result column="last_name" property="lastName"/>
		<!-- 其他不指定的列会自动封装 -->
	</resultMap>
	
	<select id="getEmpById" resultMap="MySimpleEmp">
		select * from tbl_employee where id = #{id}
	</select>
	
	<!-- 场景一：
		查询Employee的同时查询员工对应的部门
		一个员工与部门之间对应的关系
	 -->
	<!-- 第一种方式：联合查询：级联属性封装结果集 -->
	<resultMap type="com.stanlong.mybatis.pojo.Employee" id="MyDifEmp">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="gender" property="gender"/>
		<result column="did" property="dept.id"/>
		<result column="dept_name" property="dept.departmentName"/>
	</resultMap>
	
	<!-- 第二种方式： -->
	<resultMap type="com.stanlong.mybatis.pojo.Employee" id="MyDifEmp2">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="gender" property="gender"/>
		
		<!-- association 可以指定联合的javaBean对象 
			property="dept" 指定哪个属性是联合的对象
			javaType:指定这个属性对象的类型[不能省略]
		-->
		<association property="dept" javaType="com.stanlong.mybatis.pojo.Department">
			<id column="did" property="id"/>
			<result column="dept_name" property="departmentName"/>
		</association>
	</resultMap>
	
	<select id="getEmpAndDept" resultMap="MyDifEmp2">
		select 
			e.id
			,e.last_name
			,e.gender
			,e.d_id
			,e.email
			,d.id did
			,d.dept_name 
		from tbl_dept d, tbl_employee e
		where e.d_id = d.id and e.id = #{id}
	</select>
	
	<!-- 使用  association 进行分步查询
		1、先按照员工id查询员工信息
		2、根据查到员工中的d_id值去部门表查出部门信息
		3、部门设置到员工中
	-->
	
	<resultMap type="com.stanlong.mybatis.pojo.Employee" id="MyEmpByStep">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="gender" property="gender"/>
		<result column="email" property="email"/>
		
		<!-- 
			association:定义关联对象的封闭规则
			select:表明当前对象是调用select指定的方法查出的结果
			column:指定将哪一列的值传给这个方法
			
			流程：使用select指定的方法（从传入column指定的这列参数的值）查出对象，并封装给 property指定的属性
		 -->
		<association property="dept" 
			select="com.stanlong.mybatis.dao.DepartmentMapper.getDeptById"
			column="d_id"></association>
	</resultMap>
	
	<select id="getEmpByIdStep" resultMap="MyEmpDis">
		select * from tbl_employee where id = #{id}
	</select>
	
	<!-- 分步查询的好处：可以使用延迟加载
		每次查询employee对象的时候，都将部门信息一起查询出来，部门信息在我们使用的时候再去查询
		在分段查询的基础上加上两个配置
		 开启懒加载 
		<setting name="lazyLoadingEnabled" value="true"/>
		按需加载
		<setting name="aggressiveLazyLoading" value="false"/>
	 -->
	 
	 
	<!-- 场景二 
		查询部门的时候将部门对应的所有员工信息也查询出来, 注释在DepartmentMapper.xml中
	-->
	
	<select id="getEmpsByDeptId" resultType="com.stanlong.mybatis.pojo.Employee">
		select * from tbl_employee where d_id = #{deptId}
	</select>
	
	<!-- <discriminator javaType=""></discriminator>
		鉴别器： mybatis可以使用 discriminator判断某列的值，然后根据某列的值改变封装行为
		封装Employee
			如果查出的是女生，就把部门信息查询出来，否则不查询
			如果是男生，把last_name这一列的值赋值给email
	 -->
	<resultMap type="com.stanlong.mybatis.pojo.Employee" id="MyEmpDis">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="gender" property="gender"/>
		<result column="email" property="email"/>
		
		<!-- 
			column : 指定判定的列名
			javaType ： 列值对应的java类型
		 -->
		<discriminator javaType="string" column="gender">
			<!-- 女生， resultType指定封装结果的对象 -->
			<case value="f" resultType="com.stanlong.mybatis.pojo.Employee">
				<association property="dept" 
					select="com.stanlong.mybatis.dao.DepartmentMapper.getDeptById"
					column="d_id"></association>
			</case>
			<case value="m" resultType="com.stanlong.mybatis.pojo.Employee">
				<id column="id" property="id"/>
				<result column="last_name" property="lastName"/>
				<result column="gender" property="gender"/>
				<result column="last_name" property="email"/>
			</case>
		</discriminator>
	</resultMap>
</mapper>