<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stanlong.mybatis.dao.EmployeeMapper">

	<!-- 使用第三方缓存框架encache -->
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>

	
	<!-- 配置开启二级缓存 -->
	<!-- <cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache> -->
	<!-- 
		eviction 缓存的回收策略
			LRU：最近最少使用，移除最长时间不被使用的对象，默认策略
			FIFO：先进先出，按对象进入缓存的顺序来移除
			SOFT：软引用，移除基于垃圾回收器状态和软引用规则的对象
			WEAK：弱引用，更积极地移除基于垃圾收集器状态和弱引用规则的对象
			默认是LRU
		flushInterval：缓存刷新间隔
			缓存多长时间清空一次，默认不清空
		readOnly:是否只读
			true:只读，mybatis从缓存中获取数据的操作都是只读操作，不会修改数据。
					mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户，不安全，但是速度快
			false:非只读，mybatis觉得获取的数据可能会修改，会利用序列化&反序列化的技术克隆一份新的数据，安全，但是速度慢，默认是flase
		size:缓存存放多少元素
		type="":指定自定义缓存类名
			实现Cache接口
	 -->
	
	<select id="getEmpByIdAndLastName" resultType="com.stanlong.mybatis.pojo.Employee" databaseId="mysql">
		select * from tbl_employee where id = #{id} and last_name=#{lastName}
	</select>
	
	<select id="getEmpById" resultType="com.stanlong.mybatis.pojo.Employee">
		select * from tbl_employee where id = #{id}
	</select>
	
	<select id="getEmpMap" resultType="com.stanlong.mybatis.pojo.Employee" databaseId="mysql">
		select * from tbl_employee where id = #{id} and last_name=#{lastName}
	</select>
	
	<select id="getEmpByIdReturnMap" resultType="map">
		select * from tbl_employee where id = #{id}
	</select>
	
	<select id="getEmpByLastNameLikeReturnMap" resultType="com.stanlong.mybatis.pojo.Employee">
		select * from tbl_employee where last_name like #{lastName}
	</select>
	
</mapper>