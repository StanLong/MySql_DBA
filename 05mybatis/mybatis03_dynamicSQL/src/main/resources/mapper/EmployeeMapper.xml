<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stanlong.mybatis.dao.EmployeeMapper">
<!-- 
	namespace : 名称空间,在没有和接口绑定时可以随便写，和接口绑定后需要指定为接口的全限定名
	id:唯一标识
	resultType:返回值类型
	#{id}: 从传递过来的参数中取出 id值 
	
	public Employee getEmpById(Integer id); select标签和方法名绑定
	databaseId="mysql" 在mysql环境下执行这个查询
 -->
	<select id="getEmpByIdAndLastName" resultType="com.stanlong.mybatis.pojo.Employee" databaseId="mysql">
		select * from tbl_employee where id = #{id} and last_name=#{lastName}
	</select>
	
	<select id="getEmpMap" resultType="com.stanlong.mybatis.pojo.Employee" databaseId="mysql">
		select * from tbl_employee where id = #{id} and last_name=#{lastName}
	</select>
	
	<select id="getEmpByIdReturnMap" resultType="map">
		select * from tbl_employee where id = #{id}
	</select>
	
	<select id="getEmpByLastNameLikeReturnMap" resultType="com.stanlong.mybatis.pojo.Employee">
		select * from tbl_employee where last_name like #{lastName}
	</select>
	
	<!--
		获取自增主键值
			mysql支持自增主键，自增主键值的获取， mybatis也是利用 statement.getGeneratedKeys() 
			useGeneratedKeys="true" 使用自增主键值策略
			keyProperty : 指定对应的主键属性。也就是mybatis获取到主键值 后，将这个值封装给javaBean的哪个属性
	-->
	<insert id="addEmp" useGeneratedKeys="true" keyProperty="id">
		insert into tbl_employee(last_name, email, gender)
		values(#{lastName}, #{email}, #{gender})
	</insert>
	
	<!-- Oracle 不支持自增， Oracle使用序列来模拟自增 -->
	<insert id="addEmp" databaseId="oracle">
		<!-- before的写法 -->
		<!-- keyProperty 指定对应的主键属性。也就是mybatis获取到主键值 后，将这个值封装给javaBean的哪个属性
			order="BEFORE" 当前 sql在插入sql之前执行
			resultType:查出的数据返回类型
			BEFORE 运行顺序：先运行 selectKey查询id的sql,查出的id值封装给javaBean的id属性
				再运行插入的Sql,就可以取出 id属性对应 的值 
		 -->
		<!-- <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
			编写查询主键的Sql
			select EMPLOYEE_SEQ.nextval from dual
		</selectKey> -->
		
		<!-- 插入时的主键是从序列中拿到的 -->
		<!-- insert into tbl_employee(last_name, email, gender)
		values(#{lastName}, #{email}, #{gender}) -->
		
		<!-- after的写法 
			AFTER运行顺序：
				先运行插入的sql， 从序列中取出新值作为id,
				再运行 selectKey查询id的sql
		-->
		<selectKey keyProperty="id" order="AFTER" resultType="Integer">
			select EMPLOYEES_SEQ.currval from dual
		</selectKey>
		
		insert into tbl_employee(last_name, email, gender)
		values(employees_sql.nextval, #{email}, #{gender})
	</insert>
	
	<update id="updateEmp">
		update tbl_employee
		set last_name = #{lastName}, email=#{email}, gender=#{gender}
		where id=#{id}
	</update>
	
	<delete id="deleteById">
		delete from tbl_employee where id = #{id}
	</delete>
</mapper>