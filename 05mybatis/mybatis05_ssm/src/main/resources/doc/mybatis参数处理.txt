单个参数：mybatis不会做特殊处理，参数名可任意
	#{参数名}：取出参数值
	
多个参数：mybatis会做特殊处理
	多个参数会被封装成一个map
		key: param1, param2...paramN, 或者参数的索引也可以
		value:传入的参数值
	#{}就是从map中获取指定的key的值
	
	如果配置错误会出现如下异常
	org.apache.ibatis.binding.BindingException
	Parameter 'id' not found. 
	Available parameters are [arg1, arg0, param1, param2]
	操作：
		方法：public Employee getEmpByIdAndLastName(Integer id, String lastName);
		取值： #{id}, #{lastName}
	
命名参数：明确指定封闭参数时 map的key: @Param("id)
	多个参数会被封装成一个map
		key: 使用@Param注解指定的值
		value:参数值
	#{指定的key} 取出对应的参数
	
POJO
如果多个参数正好是业务逻辑模型，直可以直接传入pojo
	#{属性名}， 取出传入的pojo值

MAP
如果多个参数不是业务模型中的数据，没有对应的pojo，为了方便，我们也可以传入map
	#{key} 取出map中对应的值
	
	
如果多个参数不是业务模型中的数据，但是经常使用，可以写一个TO(Transfer Object)数据传输对象
比如分布
Page{
	int index;
	int size;
	
=======================思考=========================================
public Employee getEmp(@Param("id") Integer id, String lastName);
	取值： id ==> #{id/param1} lastName==>#{param2}
	
public Employee getEmp(Integer id, @Param("e")Employee emp);
	取值： id==>#{param1} lastName==>#{param2.lastName/e.lastName}

##特别注意，如果是Collection(List, set)类型或者是数组，也会特殊处理，也是把传入的list或者数组封装在map中
	keu:Collection(collection), 如果是List还可以使用这个key(list)
	数组(array)
public Employee getEmp(List<Integer> ids);
	取值：取出第一个id的值 #{ids[0]}
}

=======================参数值的获取=========================================
#{} 可以获取 到map中的值或者pojo对象属性的值
${} 可以获取 到map中的值或者pojo对象属性的值
区别：
	#{}:是以预编译的形式，将参数设置到sql语句中，相当于PreparedStatement, 可以防止sql注入
	${}:将取出的值直接拼装在sql语句中，会有安全问题
	大多数情况下取参数的值都应该用#{}
	原生jdbc不支持占位符，就可以使用${}进行取值
	比如分表，排序
	select * from ${table_name} order by ${}

#{}更丰富的用法
	规定参数的一些规则
	javaType, jdbcType, mode(存储过程), numericScale,resultMap, typeHandler, jdbcTypeName, expression(未来准备支持的功能)
	
	jdbcType通常需要在某种特定的条件下被设置
		在我们数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理，比如oracle（报错）
		JdbcType OTHER:无效的类型，因为mybatis对所有的null映射的是Jdbc OTHER 类型
		由于全局配置中： jdbcTypeForNull=OTHER, oracle不支持
		两种修改方法
		1、#{email, jdbcType=NULL} --指明字段为空时
		2、jdbcTypeForNull=NULL     --全局配置

